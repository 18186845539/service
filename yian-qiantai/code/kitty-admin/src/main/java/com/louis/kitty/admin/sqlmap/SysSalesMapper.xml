<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.louis.kitty.admin.dao.SysSalesMapper">
  <resultMap id="BaseResultMap" type="com.louis.kitty.admin.model.SysSales">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="provincial" jdbcType="VARCHAR" property="provincial" />
  </resultMap>
  <sql id="Base_Column_List">
    id,name,type,status,provincial
  </sql>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from salesman
    where id = #{id,jdbcType=BIGINT}
  </delete>
      <insert id="insertSelective" parameterType="com.louis.kitty.admin.model.SysSales">
    insert into salesman
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
       <if test="name != null">
        name,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="provincial != null">
        provincial,
      </if>
     </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
       <if test="name != null">
       #{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="provincial != null">
        #{provincial,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.louis.kitty.admin.model.SysSales">
    update salesman
    <set>
       <if test="name != null">
       name=#{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
       type= #{type,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
       status=#{status,jdbcType=VARCHAR},
      </if>      
      <if test="provincial != null">
        provincial=#{provincial,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.louis.kitty.admin.model.SysSales">
    update salesman
    set
        name=#{name,jdbcType=VARCHAR},     
        type= #{type,jdbcType=VARCHAR},     
        status #{status,jdbcType=VARCHAR},      
        provincial=#{provincial,jdbcType=VARCHAR}, 
     where id = #{id,jdbcType=BIGINT}
  </update>
    <select id="findPageByFilters" parameterType="java.util.HashMap" resultMap="BaseResultMap">
  	select 
    <include refid="Base_Column_List" />
     from salesman
    <where>
     	1=1
    <if test="name != null and name != '' ">
	    and name like concat('%',#{name},'%')
	</if>
	<if test="type != null and type != '' ">
		and type like concat('%',#{type},'%')
	</if>
	</where>
  </select>
  <select id="findPage" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from salesman
  </select>
    <select id="getSalesNames" resultMap="BaseResultMap">
    select name  from salesman <!--ORDER BY CONVERT( name USING gbk ) COLLATE gbk_chinese_ci ASC-->
  </select>
  <select id="findPageByLabel" parameterType="java.lang.String" resultMap="BaseResultMap">
  	<bind name="pattern" value="'%' + _parameter.name + '%'" />
  	select 
    <include refid="Base_Column_List" />
     from salesman
     where name like #{pattern}
  </select>
  <select id="findByLable" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from salesman
    where name = #{name,jdbcType=VARCHAR}
  </select>
  <select id="findByName" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from salesman
    where name = #{name,jdbcType=VARCHAR}
  </select>
</mapper>